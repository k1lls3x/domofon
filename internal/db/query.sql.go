// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const changePassword = `-- name: ChangePassword :exec
UPDATE users SET password_hash = $1 WHERE username = $2
`

type ChangePasswordParams struct {
	PasswordHash string
	Username     string
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) error {
	_, err := q.db.Exec(ctx, changePassword, arg.PasswordHash, arg.Username)
	return err
}

const changePasswordByPhone = `-- name: ChangePasswordByPhone :exec
UPDATE users
SET password_hash = $1
WHERE phone = $2
`

type ChangePasswordByPhoneParams struct {
	PasswordHash string
	Phone        string
}

func (q *Queries) ChangePasswordByPhone(ctx context.Context, arg ChangePasswordByPhoneParams) error {
	_, err := q.db.Exec(ctx, changePasswordByPhone, arg.PasswordHash, arg.Phone)
	return err
}

const createPasswordResetToken = `-- name: CreatePasswordResetToken :exec
INSERT INTO password_reset_tokens (user_id, token, expires_at)
VALUES ($1, $2, $3)
`

type CreatePasswordResetTokenParams struct {
	UserID    pgtype.Int4
	Token     string
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) error {
	_, err := q.db.Exec(ctx, createPasswordResetToken, arg.UserID, arg.Token, arg.ExpiresAt)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password_hash, email, phone, role, first_name, last_name)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, username, password_hash, email, phone, role, is_active, created_at, first_name, last_name
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
	Email        string
	Phone        string
	Role         pgtype.Text
	FirstName    pgtype.Text
	LastName     pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.Phone,
		arg.Role,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsActive,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}

const deleteAllResetTokensForUser = `-- name: DeleteAllResetTokensForUser :exec
DELETE FROM password_reset_tokens WHERE user_id = $1
`

func (q *Queries) DeleteAllResetTokensForUser(ctx context.Context, userID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteAllResetTokensForUser, userID)
	return err
}

const deletePhoneVerificationToken = `-- name: DeletePhoneVerificationToken :exec
DELETE FROM phone_verification_tokens WHERE phone = $1
`

func (q *Queries) DeletePhoneVerificationToken(ctx context.Context, phone string) error {
	_, err := q.db.Exec(ctx, deletePhoneVerificationToken, phone)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getPhoneVerificationToken = `-- name: GetPhoneVerificationToken :one
SELECT phone, verification_code, expires_at, created_at FROM phone_verification_tokens
WHERE phone = $1 AND verification_code = $2 AND expires_at > NOW()
`

type GetPhoneVerificationTokenParams struct {
	Phone            string
	VerificationCode string
}

func (q *Queries) GetPhoneVerificationToken(ctx context.Context, arg GetPhoneVerificationTokenParams) (PhoneVerificationToken, error) {
	row := q.db.QueryRow(ctx, getPhoneVerificationToken, arg.Phone, arg.VerificationCode)
	var i PhoneVerificationToken
	err := row.Scan(
		&i.Phone,
		&i.VerificationCode,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPhoneVerificationTokenByPhone = `-- name: GetPhoneVerificationTokenByPhone :one
SELECT phone, verification_code, expires_at, created_at
FROM phone_verification_tokens
WHERE phone = $1
`

func (q *Queries) GetPhoneVerificationTokenByPhone(ctx context.Context, phone string) (PhoneVerificationToken, error) {
	row := q.db.QueryRow(ctx, getPhoneVerificationTokenByPhone, phone)
	var i PhoneVerificationToken
	err := row.Scan(
		&i.Phone,
		&i.VerificationCode,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, password_hash, email, phone, role, is_active, created_at, first_name, last_name FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsActive,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password_hash, email, phone, role, is_active, created_at, first_name, last_name FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsActive,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, username, password_hash, email, phone, role, is_active, created_at, first_name, last_name FROM users WHERE phone = $1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsActive,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}

const getUserByResetToken = `-- name: GetUserByResetToken :one
SELECT u.id, u.username, u.password_hash, u.email, u.phone, u.role, u.is_active, u.created_at, u.first_name, u.last_name
FROM users u
JOIN password_reset_tokens prt ON prt.user_id = u.id
WHERE prt.token = $1 AND prt.expires_at > NOW()
`

func (q *Queries) GetUserByResetToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByResetToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsActive,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, email, phone, role, is_active, created_at, first_name, last_name FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsActive,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, password_hash, email, phone, role, is_active, created_at, first_name, last_name FROM users
`

// Получить всех пользователей
func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.Phone,
			&i.Role,
			&i.IsActive,
			&i.CreatedAt,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const invalidateResetToken = `-- name: InvalidateResetToken :exec
DELETE FROM password_reset_tokens WHERE token = $1
`

func (q *Queries) InvalidateResetToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, invalidateResetToken, token)
	return err
}

const registerUser = `-- name: RegisterUser :exec
INSERT INTO users(username, password_hash, email, phone, role, is_active, first_name, last_name)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type RegisterUserParams struct {
	Username     string
	PasswordHash string
	Email        string
	Phone        string
	Role         pgtype.Text
	IsActive     pgtype.Bool
	FirstName    pgtype.Text
	LastName     pgtype.Text
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) error {
	_, err := q.db.Exec(ctx, registerUser,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.Phone,
		arg.Role,
		arg.IsActive,
		arg.FirstName,
		arg.LastName,
	)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2,
    password_hash = $3,
    email = $4,
    phone = $5,
    role = $6,
    first_name = $7,
    last_name = $8
WHERE id = $1
RETURNING id, username, password_hash, email, phone, role, is_active, created_at, first_name, last_name
`

type UpdateUserParams struct {
	ID           int32
	Username     string
	PasswordHash string
	Email        string
	Phone        string
	Role         pgtype.Text
	FirstName    pgtype.Text
	LastName     pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.Phone,
		arg.Role,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsActive,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}

const upsertPhoneVerificationToken = `-- name: UpsertPhoneVerificationToken :exec
INSERT INTO phone_verification_tokens (phone, verification_code, expires_at)
VALUES ($1, $2, $3)
ON CONFLICT (phone)
DO UPDATE SET verification_code = EXCLUDED.verification_code, expires_at = EXCLUDED.expires_at, created_at = CURRENT_TIMESTAMP
`

type UpsertPhoneVerificationTokenParams struct {
	Phone            string
	VerificationCode string
	ExpiresAt        pgtype.Timestamp
}

func (q *Queries) UpsertPhoneVerificationToken(ctx context.Context, arg UpsertPhoneVerificationTokenParams) error {
	_, err := q.db.Exec(ctx, upsertPhoneVerificationToken, arg.Phone, arg.VerificationCode, arg.ExpiresAt)
	return err
}
